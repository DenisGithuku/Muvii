// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.core.di;

import com.denisgithuku.core.providers.AppThemeProvider;
import com.denisgithuku.core.providers.UserPreferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreModule_ProvideUserThemeFactory implements Factory<AppThemeProvider> {
  private final Provider<UserPreferences> userPreferencesProvider;

  public CoreModule_ProvideUserThemeFactory(Provider<UserPreferences> userPreferencesProvider) {
    this.userPreferencesProvider = userPreferencesProvider;
  }

  @Override
  public AppThemeProvider get() {
    return provideUserTheme(userPreferencesProvider.get());
  }

  public static CoreModule_ProvideUserThemeFactory create(
      Provider<UserPreferences> userPreferencesProvider) {
    return new CoreModule_ProvideUserThemeFactory(userPreferencesProvider);
  }

  public static AppThemeProvider provideUserTheme(UserPreferences userPreferences) {
    return Preconditions.checkNotNullFromProvides(CoreModule.INSTANCE.provideUserTheme(userPreferences));
  }
}
