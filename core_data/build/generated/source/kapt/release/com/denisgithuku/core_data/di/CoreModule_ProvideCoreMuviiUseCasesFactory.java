// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.core_data.di;

import com.denisgithuku.core_data.domain.repository.CastRepository;
import com.denisgithuku.core_data.domain.repository.FavouriteMoviesRepository;
import com.denisgithuku.core_data.domain.use_cases.CoreMuviiUseCases;
import com.denisgithuku.core_data.providers.DispatcherProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreModule_ProvideCoreMuviiUseCasesFactory implements Factory<CoreMuviiUseCases> {
  private final Provider<FavouriteMoviesRepository> favouriteMoviesRepositoryProvider;

  private final Provider<DispatcherProvider> dispatcherProvider;

  private final Provider<CastRepository> castRepositoryProvider;

  public CoreModule_ProvideCoreMuviiUseCasesFactory(
      Provider<FavouriteMoviesRepository> favouriteMoviesRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider,
      Provider<CastRepository> castRepositoryProvider) {
    this.favouriteMoviesRepositoryProvider = favouriteMoviesRepositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
    this.castRepositoryProvider = castRepositoryProvider;
  }

  @Override
  public CoreMuviiUseCases get() {
    return provideCoreMuviiUseCases(favouriteMoviesRepositoryProvider.get(), dispatcherProvider.get(), castRepositoryProvider.get());
  }

  public static CoreModule_ProvideCoreMuviiUseCasesFactory create(
      Provider<FavouriteMoviesRepository> favouriteMoviesRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider,
      Provider<CastRepository> castRepositoryProvider) {
    return new CoreModule_ProvideCoreMuviiUseCasesFactory(favouriteMoviesRepositoryProvider, dispatcherProvider, castRepositoryProvider);
  }

  public static CoreMuviiUseCases provideCoreMuviiUseCases(
      FavouriteMoviesRepository favouriteMoviesRepository, DispatcherProvider dispatcherProvider,
      CastRepository castRepository) {
    return Preconditions.checkNotNullFromProvides(CoreModule.INSTANCE.provideCoreMuviiUseCases(favouriteMoviesRepository, dispatcherProvider, castRepository));
  }
}
