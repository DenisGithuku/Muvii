// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.core_data.domain.use_cases;

import com.denisgithuku.core_data.domain.repository.CastRepository;
import com.denisgithuku.core_data.providers.DispatcherProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetCast_Factory implements Factory<GetCast> {
  private final Provider<CastRepository> castRepositoryProvider;

  private final Provider<DispatcherProvider> dispatcherProvider;

  public GetCast_Factory(Provider<CastRepository> castRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    this.castRepositoryProvider = castRepositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public GetCast get() {
    return newInstance(castRepositoryProvider.get(), dispatcherProvider.get());
  }

  public static GetCast_Factory create(Provider<CastRepository> castRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    return new GetCast_Factory(castRepositoryProvider, dispatcherProvider);
  }

  public static GetCast newInstance(CastRepository castRepository,
      DispatcherProvider dispatcherProvider) {
    return new GetCast(castRepository, dispatcherProvider);
  }
}
