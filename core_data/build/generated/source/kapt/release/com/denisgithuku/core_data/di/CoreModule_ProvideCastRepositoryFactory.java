// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.core_data.di;

import com.denisgithuku.core_data.data.remote.CoreInterface;
import com.denisgithuku.core_data.domain.repository.CastRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreModule_ProvideCastRepositoryFactory implements Factory<CastRepository> {
  private final Provider<CoreInterface> coreInterfaceProvider;

  public CoreModule_ProvideCastRepositoryFactory(Provider<CoreInterface> coreInterfaceProvider) {
    this.coreInterfaceProvider = coreInterfaceProvider;
  }

  @Override
  public CastRepository get() {
    return provideCastRepository(coreInterfaceProvider.get());
  }

  public static CoreModule_ProvideCastRepositoryFactory create(
      Provider<CoreInterface> coreInterfaceProvider) {
    return new CoreModule_ProvideCastRepositoryFactory(coreInterfaceProvider);
  }

  public static CastRepository provideCastRepository(CoreInterface coreInterface) {
    return Preconditions.checkNotNullFromProvides(CoreModule.INSTANCE.provideCastRepository(coreInterface));
  }
}
