// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.core_data.domain.use_cases;

import com.denisgithuku.core_data.domain.repository.FavouriteMoviesRepository;
import com.denisgithuku.core_data.providers.DispatcherProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetFavouriteMovies_Factory implements Factory<GetFavouriteMovies> {
  private final Provider<FavouriteMoviesRepository> favoriteMoviesRepositoryProvider;

  private final Provider<DispatcherProvider> dispatcherProvider;

  public GetFavouriteMovies_Factory(
      Provider<FavouriteMoviesRepository> favoriteMoviesRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    this.favoriteMoviesRepositoryProvider = favoriteMoviesRepositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public GetFavouriteMovies get() {
    return newInstance(favoriteMoviesRepositoryProvider.get(), dispatcherProvider.get());
  }

  public static GetFavouriteMovies_Factory create(
      Provider<FavouriteMoviesRepository> favoriteMoviesRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    return new GetFavouriteMovies_Factory(favoriteMoviesRepositoryProvider, dispatcherProvider);
  }

  public static GetFavouriteMovies newInstance(FavouriteMoviesRepository favoriteMoviesRepository,
      DispatcherProvider dispatcherProvider) {
    return new GetFavouriteMovies(favoriteMoviesRepository, dispatcherProvider);
  }
}
