// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.movies.di;

import com.denisgithuku.movies.domain.use_cases.FormatDateUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MoviesModule_ProvideDateFormatterUseCaseFactory implements Factory<FormatDateUseCase> {
  @Override
  public FormatDateUseCase get() {
    return provideDateFormatterUseCase();
  }

  public static MoviesModule_ProvideDateFormatterUseCaseFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static FormatDateUseCase provideDateFormatterUseCase() {
    return Preconditions.checkNotNullFromProvides(MoviesModule.INSTANCE.provideDateFormatterUseCase());
  }

  private static final class InstanceHolder {
    private static final MoviesModule_ProvideDateFormatterUseCaseFactory INSTANCE = new MoviesModule_ProvideDateFormatterUseCaseFactory();
  }
}
