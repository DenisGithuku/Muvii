// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.movies.domain.use_cases;

import com.denisgithuku.core_data.providers.DispatcherProvider;
import com.denisgithuku.movies.domain.repository.MoviesRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetMovieDetails_Factory implements Factory<GetMovieDetails> {
  private final Provider<MoviesRepository> movieRepositoryProvider;

  private final Provider<FormatDateUseCase> formatDateUseCaseProvider;

  private final Provider<DispatcherProvider> dispatcherProvider;

  public GetMovieDetails_Factory(Provider<MoviesRepository> movieRepositoryProvider,
      Provider<FormatDateUseCase> formatDateUseCaseProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    this.movieRepositoryProvider = movieRepositoryProvider;
    this.formatDateUseCaseProvider = formatDateUseCaseProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public GetMovieDetails get() {
    return newInstance(movieRepositoryProvider.get(), formatDateUseCaseProvider.get(), dispatcherProvider.get());
  }

  public static GetMovieDetails_Factory create(Provider<MoviesRepository> movieRepositoryProvider,
      Provider<FormatDateUseCase> formatDateUseCaseProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    return new GetMovieDetails_Factory(movieRepositoryProvider, formatDateUseCaseProvider, dispatcherProvider);
  }

  public static GetMovieDetails newInstance(MoviesRepository movieRepository,
      FormatDateUseCase formatDateUseCase, DispatcherProvider dispatcherProvider) {
    return new GetMovieDetails(movieRepository, formatDateUseCase, dispatcherProvider);
  }
}
