// Generated by Dagger (https://dagger.dev).
package com.denisgithuku.movies.domain.use_cases;

import com.denisgithuku.core_data.providers.DispatcherProvider;
import com.denisgithuku.movies.domain.repository.MoviesRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchMovies_Factory implements Factory<SearchMovies> {
  private final Provider<MoviesRepository> moviesRepositoryProvider;

  private final Provider<DispatcherProvider> dispatcherProvider;

  public SearchMovies_Factory(Provider<MoviesRepository> moviesRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    this.moviesRepositoryProvider = moviesRepositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public SearchMovies get() {
    return newInstance(moviesRepositoryProvider.get(), dispatcherProvider.get());
  }

  public static SearchMovies_Factory create(Provider<MoviesRepository> moviesRepositoryProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    return new SearchMovies_Factory(moviesRepositoryProvider, dispatcherProvider);
  }

  public static SearchMovies newInstance(MoviesRepository moviesRepository,
      DispatcherProvider dispatcherProvider) {
    return new SearchMovies(moviesRepository, dispatcherProvider);
  }
}
